#include "asset.h"

GLfloat c_block_A[][3]{
	{0, 0, 0},
	{227.0 / 255.0, 135.0 / 255.0, 43.0 / 255.0},
	{255.0 / 255.0, 177.0 / 255.0, 43.0 / 255.0},
	{255.0 / 255.0, 142.0 / 255.0, 28.0 / 255.0}
};

int block_A[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, //0
	  {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}, //1
	  {1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0}, //2
	  {1, 2, 2, 2, 2, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0}, //3
	  {1, 2, 2, 2, 1, 1, 0, 0, 0, 3, 3, 2, 2, 2, 2, 0}, //4
	  {1, 2, 2, 2, 1, 1, 0, 1, 1, 3, 3, 0, 2, 2, 2, 0}, //5
	  {1, 2, 2, 2, 1, 1, 0, 1, 1, 3, 3, 0, 2, 2, 2, 0}, //6
	  {1, 2, 2, 2, 2, 0, 0, 2, 3, 3, 3, 0, 2, 2, 2, 0}, //7
	  {1, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 2, 2, 2, 0}, //8
	  {1, 2, 2, 2, 2, 2, 2, 3, 3, 0, 2, 2, 2, 2, 2, 0}, //9
	  {1, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0}, //10
	  {1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 0}, //11
	  {1, 2, 0, 2, 2, 2, 2, 3, 3, 0, 2, 2, 2, 0, 2, 0}, //12
	  {1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0}, //13
	  {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}, //14
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  //15
};

void Asset::drawBlockA(float x, float y) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			glColor3fv(c_block_A[block_A[i][j]]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_block_B[][3]{
	{0, 0, 0},
	{219.0 / 255.0, 95.0 / 255.0, 33.0 / 255.0},
	{230.0 / 255.0, 219.0 / 255.0, 197.0 / 255.0}
};

int block_B[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 1}, //0
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //1
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //2
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //3
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0}, //4
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1}, //5
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0}, //6
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //7
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //8
	  {2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0}, //9
	  {0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0}, //10
	  {2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0}, //11
	  {2, 1, 2, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0}, //12
	  {2, 1, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0}, //13
	  {2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 0}, //14
	  {1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0 ,0 ,0 ,0, 1}  //15
};

void Asset::drawBlockB(float x, float y) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			glColor3fv(c_block_B[block_B[i][j]]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_pipe[][3]{
	{101.0 / 255.0, 142.0 / 255.0, 18.0 / 255.0},
	{9.0 / 255.0, 255.0 / 255.0, 0.0},
	{182.0 / 255.0, 255.0 / 255.0, 13.0 / 255.0}
};

int pipe_head[6][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //0
	  {0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0}, //1
	  {0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 0}, //2
	  {0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 0}, //3
	  {0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0}, //4
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  //5
};

int pipe_body[2][16]{
	  {3, 0, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 3},
	  {3, 0, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 0, 3},
};

void Asset::drawPipe(float x, float y, int l, float a) {
	float scale = 80.0 / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glRotatef(a, 0, 0, 1);
	glTranslatef(-16 / 2 * scale, 0, 0);
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 16; j++) {
			glColor3fv(c_pipe[pipe_head[i][j]]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, (i + l) * scale);
			glVertex2f((j + 1) * scale, (i + l) * scale);
			glVertex2f((j + 1) * scale, (i + l + 1) * scale);
			glVertex2f(j * scale, (i + l + 1) * scale);
			glEnd();
		}
	}
	for (int i = 0; i < l; i++) {
		for (int j = 0; j < 16; j++) {
			if (j == 0 || j == 15) continue;
			glColor3fv(c_pipe[pipe_body[i % 2][j]]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, i * scale);
			glVertex2f((j + 1) * scale, i * scale);
			glVertex2f((j + 1) * scale, (i + 1) * scale);
			glVertex2f(j * scale, (i + 1) * scale);
			glEnd();
		}
	}

	for (int i = -1; i > -5; i--) {
		for (int j = 0; j < 16; j++) {
			if (j == 0 || j == 15) continue;
			glColor3fv(c_pipe[pipe_body[(i * -1) % 2][j]]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, i * scale);
			glVertex2f((j + 1) * scale, i * scale);
			glVertex2f((j + 1) * scale, (i + 1) * scale);
			glVertex2f(j * scale, (i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_mush[][3]{
	{0, 0, 0},
	{1, 0, 0},
	{1, 1, 1}
};

int mush[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}, //0
	  {0, 0, 0, 1, 1, 3, 3, 2, 2, 2, 2, 1, 1, 0, 0, 0}, //1
	  {0, 0, 1, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 1, 0, 0}, //2
	  {0, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 1, 0}, //3
	  {0, 1, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 1, 0}, //4
	  {1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1}, //5
	  {1, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1}, //6
	  {1, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 1}, //7
	  {1, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 1}, //8
	  {1, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1}, //9
	  {1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 1}, //10
	  {0, 1, 1, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 1, 1, 0}, //11
	  {0, 0, 1, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 0, 0}, //12
	  {0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0}, //13
	  {0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0}, //14
	  {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0}  //15
};

void Asset::drawMush(float x, float y, float a) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glRotatef(a, 0, 0, 1);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (mush[i][j] == 0) continue;
			glColor3fv(c_mush[mush[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_flower[][3]{
	{249.0 / 255.0, 24.0 / 255.0, 22.0 / 255.0},
	{249.0 / 255.0, 135.0 / 255.0, 21.0 / 255.0},
	{247.0 / 255.0, 239.0 / 255.0, 18.0 / 255.0},
	{0, 0, 0},
	{244.0 / 255.0, 243.0 / 255.0, 241.0 / 255.0},
	{67.0 / 255.0, 174.0 / 255.0, 44.0 / 255.0}
};

int flower[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
	  {0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0},
	  {0, 1, 1, 2, 2, 3, 4, 3, 3, 4, 3, 2, 2, 1, 1, 0},
	  {0, 1, 1, 2, 3, 5, 4, 5, 5, 4, 5, 3, 2, 1, 1, 0},
	  {0, 1, 1, 2, 2, 3, 4, 3, 3, 4, 3, 2, 2, 1, 1, 0},
	  {0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0},
	  {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0},
	  {0, 6, 6, 0 ,0, 0, 0, 6, 6, 0, 0, 0, 0, 6, 6, 0},
	  {0, 6, 6, 6, 0, 0, 0, 6, 6, 0, 0, 0, 6, 6, 6, 0},
	  {0, 6, 6, 6, 6, 6, 0, 6, 6, 0, 6, 6, 6, 6, 6, 0},
	  {0, 0, 6, 6, 6, 6, 0, 6, 6, 0, 6, 6, 6, 6, 0, 0},
	  {0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawFlower(float x, float y, float a) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glRotatef(a, 0, 0, 1);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (flower[i][j] == 0) continue;
			glColor3fv(c_flower[flower[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_star[][3]{
	{0, 0, 0},
	{247.0 / 255.0, 232.0 / 255.0, 25.0 / 255.0},
	{249.0 / 255.0, 134.0 / 255.0, 29.0 / 255.0},
	{248.0 / 255.0, 190.0 / 255.0, 27.0 / 255.0}
};

int star[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}, //0
	  {0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0}, //1
	  {0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0}, //2
	  {0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0}, //3
	  {1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1}, //4
	  {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}, //5
	  {0, 1, 3, 4, 2, 2, 1, 2, 2, 1, 2, 2, 4, 3, 1, 0}, //6
	  {0, 0, 1, 3, 4, 2, 1, 2, 2, 1, 2, 4, 3, 1, 0, 0}, //7
	  {0, 0, 0, 1, 3, 4, 1, 2, 2, 1, 4, 3, 1, 0, 0, 0}, //8
	  {0, 0, 0, 1, 3, 4, 2, 2, 2, 2, 4, 3, 1 ,0, 0, 0}, //9
	  {0, 0, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0, 0}, //10
	  {0, 0, 1, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 1, 0, 0}, //11
	  {0, 1, 3, 4, 4, 3, 3, 1, 1, 3, 3, 4, 4 ,3, 1, 0}, //12
	  {0, 1, 3, 3, 3, 1, 1, 0, 0, 1, 1, 3, 3, 3, 1, 0}, //13
	  {1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 1}, //14
	  {1, 1, 1, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}  //15

};

void Asset::drawStar(float x, float y, float a) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glRotatef(a, 0, 0, 1);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (star[i][j] == 0) continue;
			glColor3fv(c_star[star[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

float c_mario_normal[][3] = {
	{235.0 / 255.0, 51.0 / 255.0, 35.0 / 255.0},
	{136.0 / 255.0, 97.0 / 255.0, 45.0 / 255.0},
	{234.0 / 255.0, 195.0 / 255.0, 81.0 / 255.0},
	{0, 0, 0},
	{0, 29.0 / 255.0, 245.0 / 255.0}
};

float c_mario_flower[][3] = {
	{253 / 255.0, 220.0 / 255.0, 177.0 / 255.0},
	{216.0 / 255.0, 46.0 / 255.0, 11.0 / 255.0},
	{234.0 / 255.0, 195.0 / 255.0, 81.0 / 255.0},
	{216.0 / 255.0, 46.0 / 255.0, 11.0 / 255.0},
	{206.0 / 255.0, 38.0 / 255.0, 2.0 / 255.0}
};

float c_mario_star[][3] = {
	{235.0 / 255.0, 51.0 / 255.0, 35.0 / 255.0},
	{253.0 / 255.0, 86.0 / 255.0, 33.0 / 255.0},
	{247.0 / 255.0, 232.0 / 255.0, 25.0 / 255.0},
	{0, 0, 0},
	{1.0/255.0, 187.0 / 255.0, 212.0 / 255.0}
};

int mario_idle[16][16] = {
	{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 },
	{ 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0 },
	{ 0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0 },
	{ 0, 0, 0, 0, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 1, 1, 5, 1, 1, 5, 1, 1, 0, 0, 0, 0 },
	{ 0, 0, 0, 1, 1, 1, 5, 1, 1, 5, 1, 1, 1, 0, 0, 0 },
	{ 0, 0, 1, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 1, 0, 0 },
	{ 0, 0, 3, 3, 1, 5, 6, 5, 5, 6, 5, 1, 3, 3, 0, 0 },
	{ 0, 0, 3, 3, 3, 5, 5, 5, 5, 5, 5, 3, 3, 3, 0, 0 },
	{ 0, 0, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 0 },
	{ 0, 0, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0 },
	{ 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0 },
	{ 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0 }
};

void Asset::drawMarioIdle(float x, float y, bool f, int t) {
	float scale = 40.0 / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	if (f) glRotatef(180, 0, 1, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (mario_idle[i][j] == 0) continue;
			if (t == BALL_NORMAL) {
				glColor3fv(c_mario_normal[mario_idle[i][j] - 1]);
			}
			else if (t == BALL_FLOWER) {
				glColor3fv(c_mario_flower[mario_idle[i][j] - 1]);
			}
			else if (t == BALL_STAR) {
				glColor3fv(c_mario_star[mario_idle[i][j] - 1]);
			}
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

int mario_jump[16][16] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3},
	{0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3},
	{0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 1, 1, 1},
	{0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 1, 1, 1},
	{0, 0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 1},
	{0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0},
	{0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0},
	{0, 0, 1, 1, 1, 1, 1, 5, 1, 1, 1, 5, 1, 0, 0, 0},
	{0, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 5, 0, 0, 1},
	{3, 3, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 1},
	{3, 3, 3, 0, 5, 5, 1, 5, 5, 2, 5, 5, 2, 5, 1, 1},
	{0, 3, 0, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1},
	{0, 0, 1, 1, 1, 5 ,5, 5, 5, 5, 5, 5, 5, 5, 1, 1},
	{0, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0},
	{0, 1, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawMarioJump(float x, float y, bool f, int t) {
	float scale = 40.0 / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	if (f) glRotatef(180, 0, 1, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (mario_jump[i][j] == 0) continue;
			if (t == BALL_NORMAL) {
				glColor3fv(c_mario_normal[mario_jump[i][j] - 1]);
			}
			else if (t == BALL_FLOWER) {
				glColor3fv(c_mario_flower[mario_jump[i][j] - 1]);
			}
			else if (t == BALL_STAR) {
				glColor3fv(c_mario_star[mario_jump[i][j] - 1]);
			}
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

int mario_fall[16][16] = {
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
	{0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 0, 0, 0, 0, 0},
	{0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0, 0},
	{0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0},
	{0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0},
	{0, 0, 0, 1, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 5, 5 ,5, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0},
	{0, 0, 0, 5, 5, 5, 5, 1, 1, 1, 1, 1, 3, 3, 3, 0},
	{0, 0, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 3, 3, 3, 0},
	{0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0},
	{0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0},
	{0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawMarioFall(float x, float y, bool f, int t) {
	float scale = 40.0 / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	if (f) glRotatef(180, 0, 1, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (mario_fall[i][j] == 0) continue;
			if (t == BALL_NORMAL) {
				glColor3fv(c_mario_normal[mario_fall[i][j] - 1]);
			}
			else if (t == BALL_FLOWER) {
				glColor3fv(c_mario_flower[mario_fall[i][j] - 1]);
			}
			else if (t == BALL_STAR) {
				glColor3fv(c_mario_star[mario_fall[i][j] - 1]);
			}
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

float c_luigi[][3] = {
	{85.0 / 255.0, 175.0 / 255.0, 58.0 / 255.0},
	{136.0 / 255.0, 97.0 / 255.0, 45.0 / 255.0},
	{234.0 / 255.0, 195.0 / 255.0, 81.0 / 255.0},
	{0, 0, 0},
	{0, 29.0 / 255.0, 245.0 / 255.0}
};

int Luigi_move_0[16][16] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
	{0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 0, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0},
	{0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0},
	{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 5, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 1 ,1, 1, 1, 5, 5, 1, 1, 0, 0, 0, 0, 0},
	{0, 0, 0, 1, 1, 1, 5, 5, 2, 5, 5, 0, 0, 0, 0, 0},
	{0, 0, 0, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0},
	{0, 0, 0, 5, 1, 1, 3, 3, 5, 5, 5, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 5, 1, 3, 3, 5, 5, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}
};

int Luigi_move_1[16][16] = {
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
	{0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 2, 0, 0, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0},
	{0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0},
	{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 1, 1, 5, 5, 1, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 1, 1, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0},
	{0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0},
	{0, 0, 1, 1, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0},
	{0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}
};

int Luigi_move_2[16][16] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
	{0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 0, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0},
	{0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0},
	{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 5, 5, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 5 ,1, 1, 1, 1, 5, 1, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 5, 5, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 5, 5, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0},
	{0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}
};

int Luigi_move_3[16][16] = {
	{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
	{0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 3, 0, 0, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0},
	{0, 0, 0, 2, 3, 2, 3, 3, 3, 3, 4, 3, 3, 3, 0, 0},
	{0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0},
	{0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 5, 1, 1, 1, 5, 0, 0, 0, 0, 0},
	{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0},
	{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0},
	{0, 0, 0, 1, 1, 1, 5, 5, 5, 2, 0, 0, 1, 0, 0, 0},
	{0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0},
	{0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0},
	{0, 1, 1, 5, 5, 5, 0, 0, 0, 5, 5, 1, 1, 0, 0, 0},
	{0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawLuigiMove(float x, float y, bool f, int t) {
	float scale = 40.0 / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	if (f) glRotatef(180, 0, 1, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (t == 0) {
				if (Luigi_move_0[i][j] == 0) continue;
				glColor3fv(c_luigi[Luigi_move_0[i][j] - 1]);
			}
			else if (t == 1) {
				if (Luigi_move_1[i][j] == 0) continue;
				glColor3fv(c_luigi[Luigi_move_1[i][j] - 1]);
			}
			else if (t == 2 || t == 4) {
				if (Luigi_move_2[i][j] == 0) continue;
				glColor3fv(c_luigi[Luigi_move_2[i][j] - 1]);
			}
			else if (t == 3) {
				if (Luigi_move_3[i][j] == 0) continue;
				glColor3fv(c_luigi[Luigi_move_3[i][j] - 1]);
			}
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_coin[][3]{
	{246.0 / 255.0, 246.0 / 255.0, 246.0 / 255.0},
	{246.0 / 255.0, 187.0 / 255.0, 7.0 / 255.0},
	{210.0 / 255.0, 138.0 / 255.0, 36.0 / 255.0},
	{247.0 / 255.0, 248.0 / 255.0, 24.0 / 255.0},
	{34.0 / 255.0, 34.0 / 255.0, 32.0 / 255.0}
};

int coin[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //0
	  {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0}, //1
	  {0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0}, //2
	  {0, 0, 0, 0, 1, 2, 4, 1, 1, 4, 2, 3, 0, 0, 0, 0}, //3
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //4
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //5
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //6
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //7
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //8
	  {0, 0, 0, 1, 2, 4, 1, 4, 2, 5, 4, 2, 3, 0, 0, 0}, //9
	  {0, 0, 0, 1, 2, 4, 1, 2, 2, 5, 4, 2, 3, 0, 0, 0}, //10
	  {0, 0, 0, 1, 2, 4, 1, 2, 2, 5, 4, 2, 3, 0, 0, 0}, //11
	  {0, 0, 0, 0, 2, 4, 4, 5, 5, 4, 2, 3, 0 ,0 ,0, 0}, //12
	  {0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0}, //13
	  {0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0}, //14
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  //15
};

void Asset::drawCoin(float x, float y) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (coin[i][j] == 0) continue;
			glColor3fv(c_coin[coin[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

int num_zero[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0}
};
int num_one[7][6] = {
	 {0, 0, 1, 2, 0, 0},
	 {0, 1, 1, 2, 0, 0},
	 {0, 0, 1, 2, 0, 0},
	 {0, 0, 1, 2, 0, 0},
	 {0, 0, 1, 2, 0, 0},
	 {0, 0, 1, 2, 0, 0},
	 {0, 1, 1, 1, 2, 0}
};
int num_two[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{0, 0, 0, 0, 1, 2},
	{0, 0, 1, 1, 2, 0},
	{0, 1, 2, 0, 0, 0},
	{1, 2, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 2}
};
int num_three[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{0, 0, 0, 0, 1, 2},
	{0, 0, 1, 1, 2, 0},
	{0, 0, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0}
};
int num_four[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 1, 2, 0},
	{1, 2, 0, 1, 2, 0},
	{1, 2, 0, 1, 2, 0},
	{1, 1, 1, 1, 1, 2},
	{0, 0, 0, 1, 2, 0},
	{0, 0, 0, 1, 2, 0}
};
int num_five[7][6] = {
	{1, 1, 1, 1, 1, 2},
	{1, 2, 0, 0, 0, 0},
	{1, 1, 1, 1, 2, 0},
	{0, 0, 0, 0, 1, 2},
	{0, 0, 0, 0, 1, 2},
	{1, 2, 0, 0, 2, 0},
	{0, 1, 1, 1, 2, 0}
};
int num_six[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 0, 0},
	{1, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0}
};
int num_seven[7][6] = {
	{1, 1, 1, 1, 1, 2},
	{0, 0, 0, 0, 1, 2},
	{0, 0, 0, 1, 2, 0},
	{0, 0, 1, 2, 0, 0},
	{0, 0, 1, 2, 0, 0},
	{0, 0, 1, 2, 0, 0},
	{0, 0, 1, 2, 0, 0}
};
int num_eight[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0}
};
int num_nine[7][6] = {
	{0, 1, 1, 1, 2, 0},
	{1, 2, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 1, 2},
	{0, 0, 0, 0, 1, 2},
	{1, 2, 0, 0, 1, 2},
	{0, 1, 1, 1, 2, 0}
};

GLfloat c_num[][3] = {
	{247.0 / 255.0, 248.0 / 255.0, 24.0 / 255.0},
	{246.0 / 255.0, 187.0 / 255.0, 7.0 / 255.0}
};

void Asset::drawNumber(float x, float y, int n) {
	float scale = SCALE / 7.0;
	int tmp = 0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-6 / 2 * scale, 7 / 2 * scale, 0);
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < 6; j++) {
			if (n == 0) tmp = num_zero[i][j];
			else if (n == 1) tmp = num_one[i][j];
			else if (n == 2) tmp = num_two[i][j];
			else if (n == 3) tmp = num_three[i][j];
			else if (n == 4) tmp = num_four[i][j];
			else if (n == 5) tmp = num_five[i][j];
			else if (n == 6) tmp = num_six[i][j];
			else if (n == 7) tmp = num_seven[i][j];
			else if (n == 8) tmp = num_eight[i][j];
			else if (n == 9) tmp = num_nine[i][j];
			if (tmp == 0) continue;
			glColor3fv(c_num[tmp - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_cloud[][3]{
	{85.0 / 255.0, 96.0 / 255.0, 175.0 / 255.0},
	{231.0 / 255.0, 236.0 / 255.0, 250.0 / 255.0},
	{79.0 / 255.0, 210.0 / 255.0, 245.0 / 255.0},
};

int cloud[23][30] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0},
	{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 2, 1, 0, 0, 0},
	{0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 0, 0},
	{0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0},
	{0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1},
	{1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1},
	{1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1},
	{0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0},
	{0, 0, 1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0},
	{0, 0, 0, 1, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0},
	{0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1},
	{0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1},
	{0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawCloud(float x, float y, int s) {
	float scale_x = SCALE / 100 * 30;
	float scale_y = SCALE / 100 * 23;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-(10.0 - (s - 1) * 10) / 2 * scale_x, 23.0 / 2.0 * scale_y, 0);
	glRotatef(180, 0, 1, 0);
	for (int i = 0; i < 23; i++) {
		for (int j = 0; j < 10; j++) {
			if (cloud[i][j] == 0) continue;
			glColor3fv(c_cloud[cloud[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale_x, -i * scale_y);
			glVertex2f((j + 1) * scale_x, -i * scale_y);
			glVertex2f((j + 1) * scale_x, -(i + 1) * scale_y);
			glVertex2f(j * scale_x, -(i + 1) * scale_y);
			glEnd();
		}
	}
	for (int l = 0; l < s; l++) {
		for (int i = 0; i < 23; i++) {
			for (int j = 10; j < 20; j++) {
				if (cloud[i][j] == 0) continue;
				glColor3fv(c_cloud[cloud[i][j] - 1]);
				glBegin(GL_POLYGON);
				glVertex2f((j + l * 10) * scale_x, -i * scale_y);
				glVertex2f((j + l * 10 + 1) * scale_x, -i * scale_y);
				glVertex2f((j + l * 10 + 1) * scale_x, -(i + 1) * scale_y);
				glVertex2f((j + l * 10) * scale_x, -(i + 1) * scale_y);
				glEnd();
			}
		}
	}
	for (int i = 0; i < 23; i++) {
		for (int j = 20; j < 30; j++) {
			if (cloud[i][j] == 0) continue;
			glColor3fv(c_cloud[cloud[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f((j + (s - 1) * 10) * scale_x, -i * scale_y);
			glVertex2f((j + (s - 1) * 10 + 1) * scale_x, -i * scale_y);
			glVertex2f((j + (s - 1) * 10 + 1) * scale_x, -(i + 1) * scale_y);
			glVertex2f((j + (s - 1) * 10)* scale_x, -(i + 1) * scale_y);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_wall_cloud[][3]{
	{0, 0, 0},
	{1, 1, 1},
	{146.0 / 255.0, 234.0 / 255.0, 220.0 / 255.0},
};

int wall_cloud[16][16] = {
  //-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
	{0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 3, 1, 0, 0, 0},
	{0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0, 0},
	{0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 0},
	{0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 0},
	{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0},
	{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0},
	{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2},
	{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2},
	{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2},
	{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0},
	{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0},
	{0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 0},
	{0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0, 0},
	{0, 0, 1, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1, 0, 0},
	{0, 0, 0, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 0, 0, 0}
};

void Asset::drawWallCloud(float x, float y, float s) {
	float scale = s / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (wall_cloud[i][j] == 0) continue;
			glColor3fv(c_wall_cloud[wall_cloud[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale *1.3, -i * scale);
			glVertex2f((j + 1) * scale * 1.3, -i * scale);
			glVertex2f((j + 1) * scale * 1.3, -(i + 1) * scale);
			glVertex2f(j * scale * 1.3, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}

GLfloat c_fireball[][3]{
	{249.0 / 255.0, 24.0 / 255.0, 22.0 / 255.0},
	{249.0 / 255.0, 135.0 / 255.0, 21.0 / 255.0},
	{247.0 / 255.0, 239.0 / 255.0, 18.0 / 255.0},
	{0, 0, 0},
	{244.0 / 255.0, 243.0 / 255.0, 241.0 / 255.0},
	{67.0 / 255.0, 174.0 / 255.0, 44.0 / 255.0}
};

int fireball[16][16] = {
	//-0--1--2--3--4--5--6--7--8--9-10-11-12-13-14-15
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0},
	  {0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0, 0, 0, 0},
	  {0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, 0, 0},
	  {0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, 0},
	  {0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, 0},
	  {0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 1, 0},
	  {0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 2, 3, 1, 0},
	  {0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 1, 2, 1, 0},
	  {0, 0, 1, 2, 3, 3, 3, 3, 2, 1, 0, 0, 0, 1, 0, 0},
	  {0, 0, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

void Asset::drawFireBall(float x, float y, float a) {
	float scale = SCALE / 16.0;
	glPushMatrix();
	glTranslatef(x, y, 0);
	glRotatef(a, 0, 0, 1);
	glTranslatef(-16 / 2 * scale, 16 / 2 * scale, 0);
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 16; j++) {
			if (fireball[i][j] == 0) continue;
			glColor3fv(c_fireball[fireball[i][j] - 1]);
			glBegin(GL_POLYGON);
			glVertex2f(j * scale, -i * scale);
			glVertex2f((j + 1) * scale, -i * scale);
			glVertex2f((j + 1) * scale, -(i + 1) * scale);
			glVertex2f(j * scale, -(i + 1) * scale);
			glEnd();
		}
	}
	glPopMatrix();
}